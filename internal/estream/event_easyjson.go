// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package estream

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream(in *jlexer.Lexer, out *UserUpdatedPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "public_id":
			out.PublicID = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream(out *jwriter.Writer, in UserUpdatedPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"public_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.PublicID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserUpdatedPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserUpdatedPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserUpdatedPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserUpdatedPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream(l, v)
}
func easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream1(in *jlexer.Lexer, out *UserDeletedPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "public_id":
			out.PublicID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream1(out *jwriter.Writer, in UserDeletedPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"public_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.PublicID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserDeletedPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserDeletedPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserDeletedPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserDeletedPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream1(l, v)
}
func easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream2(in *jlexer.Lexer, out *UserCreatedPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "public_id":
			out.PublicID = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream2(out *jwriter.Writer, in UserCreatedPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"public_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.PublicID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserCreatedPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserCreatedPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserCreatedPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserCreatedPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream2(l, v)
}
func easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream3(in *jlexer.Lexer, out *TaskUpdatedPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "public_id":
			out.PublicID = string(in.String())
		case "email":
			out.Title = string(in.String())
		case "role":
			out.JiraID = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "assigned_user_id":
			out.AssignedUserID = string(in.String())
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream3(out *jwriter.Writer, in TaskUpdatedPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"public_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.PublicID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.JiraID))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"assigned_user_id\":"
		out.RawString(prefix)
		out.String(string(in.AssignedUserID))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskUpdatedPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskUpdatedPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskUpdatedPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskUpdatedPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream3(l, v)
}
func easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream4(in *jlexer.Lexer, out *TaskShuffledPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(TaskShuffledPayload, 0, 2)
			} else {
				*out = TaskShuffledPayload{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 TaskAssigned
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream4(out *jwriter.Writer, in TaskShuffledPayload) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v TaskShuffledPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskShuffledPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskShuffledPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskShuffledPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream4(l, v)
}
func easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream5(in *jlexer.Lexer, out *TaskRegisteredPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "public_id":
			out.PublicID = string(in.String())
		case "email":
			out.Title = string(in.String())
		case "role":
			out.JiraID = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "assigned_user_id":
			out.AssignedUserID = string(in.String())
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream5(out *jwriter.Writer, in TaskRegisteredPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"public_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.PublicID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.JiraID))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"assigned_user_id\":"
		out.RawString(prefix)
		out.String(string(in.AssignedUserID))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskRegisteredPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskRegisteredPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskRegisteredPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskRegisteredPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream5(l, v)
}
func easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream6(in *jlexer.Lexer, out *TaskCreatedPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "public_id":
			out.PublicID = string(in.String())
		case "email":
			out.Title = string(in.String())
		case "role":
			out.JiraID = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "assigned_user_id":
			out.AssignedUserID = string(in.String())
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream6(out *jwriter.Writer, in TaskCreatedPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"public_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.PublicID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.JiraID))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"assigned_user_id\":"
		out.RawString(prefix)
		out.String(string(in.AssignedUserID))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskCreatedPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskCreatedPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskCreatedPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskCreatedPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream6(l, v)
}
func easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream7(in *jlexer.Lexer, out *TaskCompletedPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "public_id":
			out.PublicID = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream7(out *jwriter.Writer, in TaskCompletedPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"public_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.PublicID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskCompletedPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskCompletedPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskCompletedPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskCompletedPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream7(l, v)
}
func easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream8(in *jlexer.Lexer, out *TaskAssigned) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = string(in.String())
		case "task_id":
			out.TaskID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream8(out *jwriter.Writer, in TaskAssigned) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"task_id\":"
		out.RawString(prefix)
		out.String(string(in.TaskID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskAssigned) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskAssigned) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComNikp359AtesInternalEstream8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskAssigned) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskAssigned) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComNikp359AtesInternalEstream8(l, v)
}
